AOP:面向切面编程
面对对象:纵向继承机制
面向切面:横向抽取机制(把公共功能(横切关注点)抽取出来放在另外一个类中)
AOP优点:
1:每个事物逻辑位于一个位置，代码不分散，便于维护和升级
2:业务模块更简洁，只包含核心业务代码

横切关注点:
从每个方法中抽取出来的同一类非核心业务
切面:
封装横切关注点信息的类，每个关注点体现为一个通知方法
通知:
切面必须要完成的各个具体工作
目标:
被通知的对象
代理:
向目标对象应用通知之后创建的代理对象
连接点:
横切关注点在程序代码中的具体体现，对象程序执行的某个特定位置。例如:类某个方法调用前，调用后，方法捕获到异常后等。
切入点:
定位连接点的方式:每个类的方法中都包含多个连接点，所以连接点是类中客观存在的事物，
如果把连接点看做数据库中的记录，那么切入点就是查询条件-AOP可以通过切入点定位到特定的连接点。
切点通过org.springframework.aop.Pointcut接口进行描述，它使用类和方法作为连接点的查询条件。